	pthread_t thread_id;
pthread_create(pthread_t *thread_id, NULL, (void * function)(void), void * parameter);
pthread_exit();
pthread_join(pthread_t thread_id, void *exit_code);//like wait() in process

	pthread_attr_t attr;
pthread_attr_init(&attr);
pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
pthread_create(&thread, &attr, &thread_function, NULL);
pthread_attr_destory(&attr);

int pthread_cancel(pthread_t thread);//to terminate another thread
pthread_setcanceltype(int cancel_kind, int *oldkind);//PTHREAD_CANCEL_DEFERRED,PTHREAD_CANCEL_ASYNCHRONOUS
void pthread_testcancel(void);//cancel pooint
int pthread_setcancelstate(int state, int *oldstate);//PTHREAD_CANCEL_DISABLE, PTHREAD_CANCEL_ENABLE

pthread_key_create(pthread_key_t *thread_key, void(* cleanup_fun)(void));
pthread_setspecific(pthread_key_t threadkey, void * variable);
void *pthread_getspecific(pthread_key_t threadkey);

pthread_cleanup_push(void* funcpoint, void parameter);
pthread_cleanup_pop(int flag);//unregister the cleanup handler

pthread_mutex_t
pthread_mutex_init(pthread_mutex_t * mutex, void attrib);//attrib can be null
pthread_mutex_unlock()
pthread_mutex_lock()
pthread)mutex_trylock()

sem_t sem;
sem_init(sem_t *, 0, int initdata);
sem_destory();
sem_wait();
sem_post();
sem_trywait();
sem_getvalue();

pthread_cond_t;
pthread_cond_init(pthread_cond_t *, void attrib);
pthread_cond_signal();//unlock a thread
pthread_cond_broadcast();//unlock all thread wait for cond
pthread_cond_wait()


